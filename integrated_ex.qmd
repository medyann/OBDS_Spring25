---
title: 'Template: Integrated exercise using the <i class="fab fa-r-project"></i> tidyverse'
author: "Yang"
date: "14-05-2025"
date-format: long
format: html
---

```{r}
#| label: load-packages
#| include: false

library(tidyverse)
library(readxl)
```

## Exercise

### Part 1

We provide you with an Excel file that contains gene expression data for the nine most highly variable genes in a pancreas cancer gene expression dataset (<https://portal.gdc.cancer.gov/projects/TCGA-PAAD>), as well as metadata for the individual samples and genes.

- Import the gene expression matrix from the Excel file into the R session as a `tibble`.
  Assign it to an object named `exprs_assay`.

```{r}
library(readxl)

exprs_assay <- read_excel("EH2011.xlsx")
exprs_assay
```

- Reshape the gene expression matrix in a tidy format.
  Assign it to a new object `exprs_assay_long`.

```{r}
exprs_assay_long <- exprs_assay %>% pivot_longer(col = where(is.numeric), names_to = "sample_name", values_to = "expression_level")
      
exprs_assay_long
```

- Draw a histogram of gene expression levels for each gene in a separate facet.

```{r}
ggplot(exprs_assay_long,aes(x = expression_level) ) +geom_histogram() + 
  facet_wrap(~gene, nrow = 3, ncol = 3)



```

## Exercise

### Part 2

- Import the sample metadata from the Excel file into the R session as a `tibble`.
  Assign it to an object named `sample_info`.

```{r}
excel_sheets("EH2011.xlsx")
sample_info <- read_excel("EH2011.xlsx", sheet = "sample_info")
sample_info
```

> Metadata key:
> 
> [NIH AJCC staging system](https://www.cancer.gov/publications/dictionaries/ca> ncer-terms/def/ajcc-staging-system)
> 
> - grade: how abnormal the cancer cells and tissue look under a microscope
> - T: size of the tumor and any spread of cancer into nearby tissue
> - N: spread of cancer to nearby lymph nodes
> - M: metastasis (spread of cancer to other parts of the body)

- Convert the four columns above to the factor type.

```{r}
sample_info <- sample_info %>% mutate(grade = factor(grade, levels = c("G1", "G2","G3")), 
                                      T = factor(T, levels = c("Tis","T1","T2","T3","T4")),
                                      N = factor(N, levels = c("N0","N1","N2")),
                                      M = factor(M, levels = c("M0","M1","MX"))
                                      )
# you have to use mutate to change the type of the column
## using across(.col = c(grade, T, N, M)), .fns = factor ) 
## you do not specify the 



sample_info
```

- Combine sample information with gene expression data.
  Assign the output to `exprs_sampleinfo`.

```{r}
# exprs_sampleinfo <- sample_info %>% 
exprs_sampleinfo <- left_join(exprs_assay_long, sample_info, by = c("sample_name" = "unique_patient_ID"))
## how to read the help page = do exactly what they say you should use
## by = join_by( a == b )
exprs_sampleinfo
```

## Exercise

### Part 3

- Identify the gene with the largest absolute difference in expression between male and female patients.

```{r}
sex_diff <- exprs_sampleinfo %>% group_by(gene,sex) %>% summarise(mean_exp = mean(expression_level))
sex_diff
## after group_by() function, your data are at least in one group, as indicated in the title of the tibble - "Groups: gene [9]"
## then everything acts at this group level, no sub-level data within the group will be shown by max() or any other function - it returns the group that have the max value.
## therefore you should force it to drop the grouping, using the argument ".groups = "drop"".
## rule of thumb, if you donot need groupings downstream, drop the group.
sex_diff <- exprs_sampleinfo %>% group_by(gene,sex) %>% summarise(mean_exp = mean(expression_level), .groups = "drop")
sex_diff

# sex_diff_wider <- 
sex_diff %>% pivot_wider(names_from = sex, values_from = mean_exp) %>% mutate(diff = abs(F-M)) %>% slice_max(diff, n=1 )

## you can also use ungroup() to do it



```

- Visualise the expression of that gene across tumour grades.
  Facet by `sex`.
  Color by `T` score.

```{r}
table_for_ggplot <- exprs_sampleinfo %>% filter(gene == "XIST")
table_for_ggplot %>% ggplot(aes(x = grade, y = expression_level )) + geom_violin() + facet_wrap(~sex, nrow = 1)
table_for_ggplot
```

```{r}
ggplot(table_for_ggplot,   ) +


```

- Draw a heat map of all nine genes.
  Remove labels as well as ticks for the x-axis.
  Remove the panel grid and background.

```{r}
exprs_sampleinfo %>% arrange(gene, expression_level) %>% 
ggplot(aes(x= sample_name, y = gene, fill = expression_level)) + geom_raster() +  scale_fill_distiller(palette = "RdPu") + theme(axis.text.x = element_blank(), axis.ticks.x = element_blank(), panel.background = element_blank(), panel.grid = element_blank()) +
  labs(x= "sample") + facet_wrap("sex", scales = "free_x")
```

- Repeat the heat map, grouping samples by sex.

```{r}
# Copy the code chunk above and tweak the aes(...) contents.
ggplot(exprs_sampleinfo,   ) +





```
- try to do the clusters
```{r}
expr_matrix <- exprs_sampleinfo %>%
  select(sample_name, gene, expression_level) %>%
  pivot_wider(names_from = sample_name, values_from = expression_level) %>%
  column_to_rownames("gene") %>%
  as.matrix()

sample_dist <- dist(t(expr_matrix))
sample_clust <- hclust(sample_dist)
sample_order <- sample_clust$labels[sample_clust$order]

exprs_sampleinfo <- exprs_sampleinfo %>%
  mutate(sample_name = factor(sample_name, levels = sample_order))

ggplot(exprs_sampleinfo, aes(x = sample_name, y = gene, fill = expression_level)) +
  geom_tile() +
  scale_fill_distiller(palette = "RdPu") +
  theme(
    axis.text.x = element_blank(),
    axis.ticks.x = element_blank()
  ) +
  labs(x = "Sample", y = "Gene", fill = "Expression Level")

```



